<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="JPA 연결 테스트" tests="6" skipped="0" failures="0" errors="0" timestamp="2023-07-23T05:02:25" hostname="Jeongui-MacBookPro.local" time="0.724">
  <properties/>
  <testcase name="[Querydsl] hashtag로 페이징된 게시글 검색하기" classname="com.marathon.board.repository.JpaRepositoryTest" time="0.486"/>
  <testcase name="insert 테스트" classname="com.marathon.board.repository.JpaRepositoryTest" time="0.1"/>
  <testcase name="select 테스트" classname="com.marathon.board.repository.JpaRepositoryTest" time="0.055"/>
  <testcase name="[Querydsl] 전체 hashtag 리스트에서 이름만 조회하기" classname="com.marathon.board.repository.JpaRepositoryTest" time="0.005"/>
  <testcase name="delete 테스트" classname="com.marathon.board.repository.JpaRepositoryTest" time="0.043"/>
  <testcase name="update 테스트" classname="com.marathon.board.repository.JpaRepositoryTest" time="0.02"/>
  <system-out><![CDATA[2023-07-23T14:02:24.219+09:00  INFO 4645 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.marathon.board.BoardApplication for test class com.marathon.board.repository.JpaRepositoryTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.0.4)

2023-07-23T14:02:24.242+09:00  INFO 4645 --- [    Test worker] c.m.board.repository.JpaRepositoryTest   : Starting JpaRepositoryTest using Java 17.0.6 with PID 4645 (started by jeonghokang in /Users/jeonghokang/IdeaProjects/marathon-project-board2)
2023-07-23T14:02:24.242+09:00  INFO 4645 --- [    Test worker] c.m.board.repository.JpaRepositoryTest   : No active profile set, falling back to 1 default profile: "default"
2023-07-23T14:02:24.358+09:00  INFO 4645 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-23T14:02:24.381+09:00  INFO 4645 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 22 ms. Found 4 JPA repository interfaces.
2023-07-23T14:02:24.395+09:00  INFO 4645 --- [    Test worker] beddedDataSourceBeanFactoryPostProcessor : Replacing 'dataSource' DataSource bean with embedded version
2023-07-23T14:02:24.420+09:00  INFO 4645 --- [    Test worker] o.s.j.d.e.EmbeddedDatabaseFactory        : Starting embedded database: url='jdbc:h2:mem:9ddb73a6-f135-4062-8eca-170b28c3119a;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2023-07-23T14:02:24.693+09:00  INFO 4645 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2023-07-23T14:02:24.711+09:00  INFO 4645 --- [    Test worker] SQL dialect                              : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
Hibernate: 
    
    drop table if exists article cascade 
Hibernate: 
    
    drop table if exists article_hashtag cascade 
Hibernate: 
    
    drop table if exists article_comment cascade 
Hibernate: 
    
    drop table if exists bible_candy cascade 
Hibernate: 
    
    drop table if exists hashtag cascade 
Hibernate: 
    
    drop table if exists user_account cascade 
Hibernate: 
    
    create table article (
       id bigint generated by default as identity,
        created_at timestamp(6) not null,
        created_by varchar(100) not null,
        modified_at timestamp(6) not null,
        modified_by varchar(100) not null,
        content varchar(10000) not null,
        title varchar(255) not null,
        user_id varchar(50) not null,
        primary key (id)
    )
Hibernate: 
    
    create table article_hashtag (
       article_id bigint not null,
        hashtag_id bigint not null,
        primary key (article_id, hashtag_id)
    )
Hibernate: 
    
    create table article_comment (
       id bigint generated by default as identity,
        created_at timestamp(6) not null,
        created_by varchar(100) not null,
        modified_at timestamp(6) not null,
        modified_by varchar(100) not null,
        content varchar(500) not null,
        article_id bigint not null,
        user_id varchar(50) not null,
        primary key (id)
    )
Hibernate: 
    
    create table bible_candy (
       id bigint generated by default as identity,
        created_at timestamp(6) not null,
        created_by varchar(100) not null,
        modified_at timestamp(6) not null,
        modified_by varchar(100) not null,
        content varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    
    create table hashtag (
       id bigint generated by default as identity,
        created_at timestamp(6) not null,
        created_by varchar(100) not null,
        modified_at timestamp(6) not null,
        modified_by varchar(100) not null,
        hashtag_name varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    
    create table user_account (
       user_id varchar(50) not null,
        created_at timestamp(6) not null,
        created_by varchar(100) not null,
        modified_at timestamp(6) not null,
        modified_by varchar(100) not null,
        email varchar(100),
        memo varchar(255),
        nickname varchar(100),
        user_password varchar(255) not null,
        primary key (user_id)
    )
Hibernate: create index IDX571gx7oqo5xpmgocegaidlcu9 on article (title)
Hibernate: create index IDXrmt77yibijtk4sarremr67saa on article (created_at)
Hibernate: create index IDXjl4utii2etiocimt799wvtuvv on article (created_by)
Hibernate: create index IDXpieqqnljv147sefofs56h25qx on article_comment (content)
Hibernate: create index IDXh1jx107qecntcbcpc2vfb07ij on article_comment (created_at)
Hibernate: create index IDXc6pa61djuf2o8xnceyyvtdbaq on article_comment (created_by)
Hibernate: create index IDXqsw749049hk4qchgifri26i47 on hashtag (created_at)
Hibernate: create index IDX86k52tgc32cdprjluy33m0k2d on hashtag (created_by)
Hibernate: 
    
    alter table if exists hashtag 
       add constraint UKl5g14scs493ujoy0bh0slbp7a unique (hashtag_name)
Hibernate: create index IDXogja11wxoxigeh554wd4094xv on user_account (created_at)
Hibernate: create index IDX9twf822xbr2e0qcmnxueulgfw on user_account (created_by)
Hibernate: 
    
    alter table if exists user_account 
       add constraint UKhl02wv5hym99ys465woijmfib unique (email)
Hibernate: 
    
    alter table if exists article 
       add constraint FK81hjxo20c0so6pxe8rjpjlhj4 
       foreign key (user_id) 
       references user_account
Hibernate: 
    
    alter table if exists article_hashtag 
       add constraint FKe3ccvxb3rjbjyugsttrkpabma 
       foreign key (hashtag_id) 
       references hashtag
Hibernate: 
    
    alter table if exists article_hashtag 
       add constraint FK4adimje6fx9kut67u6jd9c174 
       foreign key (article_id) 
       references article
Hibernate: 
    
    alter table if exists article_comment 
       add constraint FKghmocqkgqs5tkmucf5putw64t 
       foreign key (article_id) 
       references article
Hibernate: 
    
    alter table if exists article_comment 
       add constraint FK67dybe2dob8uvrr7fyicyb1no 
       foreign key (user_id) 
       references user_account
2023-07-23T14:02:24.871+09:00  INFO 4645 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-07-23T14:02:24.872+09:00  INFO 4645 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-23T14:02:25.476+09:00  INFO 4645 --- [    Test worker] c.m.board.repository.JpaRepositoryTest   : Started JpaRepositoryTest in 1.254 seconds (process running for 13.554)
Hibernate: 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.modified_at,
        a1_0.modified_by,
        a1_0.title,
        a1_0.user_id 
    from
        article a1_0 
    join
        (article_hashtag h1_0 
    join
        hashtag h1_1 
            on h1_1.id=h1_0.hashtag_id) 
                on a1_0.id=h1_0.article_id 
        where
            h1_1.hashtag_name in(?,?,?) 
        order by
            h1_1.hashtag_name desc,
            a1_0.title asc offset ? rows fetch first ? rows only
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.created_by,
        u1_0.email,
        u1_0.memo,
        u1_0.modified_at,
        u1_0.modified_by,
        u1_0.nickname,
        u1_0.user_password 
    from
        user_account u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        count(a1_0.id) 
    from
        article a1_0 
    join
        (article_hashtag h1_0 
    join
        hashtag h1_1 
            on h1_1.id=h1_0.hashtag_id) 
                on a1_0.id=h1_0.article_id 
        where
            h1_1.hashtag_name in(?,?,?)
Hibernate: 
    select
        count(*) 
    from
        article a1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.created_by,
        u1_0.email,
        u1_0.memo,
        u1_0.modified_at,
        u1_0.modified_by,
        u1_0.nickname,
        u1_0.user_password 
    from
        user_account u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    insert 
    into
        user_account
        (created_at, created_by, email, memo, modified_at, modified_by, nickname, user_password, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        article
        (id, content, created_at, created_by, modified_at, modified_by, title, user_id) 
    values
        (default, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        hashtag
        (id, created_at, created_by, hashtag_name, modified_at, modified_by) 
    values
        (default, ?, ?, ?, ?, ?)
Hibernate: 
    select
        count(*) 
    from
        article a1_0
Hibernate: 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.modified_at,
        a1_0.modified_by,
        a1_0.title,
        a1_0.user_id 
    from
        article a1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.created_by,
        u1_0.email,
        u1_0.memo,
        u1_0.modified_at,
        u1_0.modified_by,
        u1_0.nickname,
        u1_0.user_password 
    from
        user_account u1_0 
    where
        u1_0.user_id in(?,?)
Hibernate: 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.modified_at,
        a1_0.modified_by,
        a1_0.title,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.created_by,
        u1_0.email,
        u1_0.memo,
        u1_0.modified_at,
        u1_0.modified_by,
        u1_0.nickname,
        u1_0.user_password 
    from
        article a1_0 
    join
        user_account u1_0 
            on u1_0.user_id=a1_0.user_id 
    where
        a1_0.id=?
Hibernate: 
    select
        count(*) 
    from
        article a1_0
Hibernate: 
    select
        count(*) 
    from
        article_comment a1_0
Hibernate: 
    select
        a1_0.article_id,
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.modified_at,
        a1_0.modified_by,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.created_by,
        u1_0.email,
        u1_0.memo,
        u1_0.modified_at,
        u1_0.modified_by,
        u1_0.nickname,
        u1_0.user_password 
    from
        article_comment a1_0 
    left join
        user_account u1_0 
            on u1_0.user_id=a1_0.user_id 
    where
        a1_0.article_id=? 
    order by
        a1_0.created_at desc
Hibernate: 
    delete 
    from
        article_hashtag 
    where
        article_id=?
Hibernate: 
    delete 
    from
        article_comment 
    where
        id=?
Hibernate: 
    delete 
    from
        article_comment 
    where
        id=?
Hibernate: 
    delete 
    from
        article_comment 
    where
        id=?
Hibernate: 
    delete 
    from
        article 
    where
        id=?
Hibernate: 
    select
        count(*) 
    from
        article a1_0
Hibernate: 
    select
        count(*) 
    from
        article_comment a1_0
Hibernate: 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.modified_at,
        a1_0.modified_by,
        a1_0.title,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.created_by,
        u1_0.email,
        u1_0.memo,
        u1_0.modified_at,
        u1_0.modified_by,
        u1_0.nickname,
        u1_0.user_password 
    from
        article a1_0 
    join
        user_account u1_0 
            on u1_0.user_id=a1_0.user_id 
    where
        a1_0.id=?
Hibernate: 
    select
        h1_0.article_id,
        h1_1.id,
        h1_1.created_at,
        h1_1.created_by,
        h1_1.hashtag_name,
        h1_1.modified_at,
        h1_1.modified_by 
    from
        article_hashtag h1_0 
    join
        hashtag h1_1 
            on h1_1.id=h1_0.hashtag_id 
    where
        h1_0.article_id=?
Hibernate: 
    insert 
    into
        hashtag
        (id, created_at, created_by, hashtag_name, modified_at, modified_by) 
    values
        (default, ?, ?, ?, ?, ?)
Hibernate: 
    delete 
    from
        article_hashtag 
    where
        article_id=? 
        and hashtag_id=?
Hibernate: 
    insert 
    into
        article_hashtag
        (article_id, hashtag_id) 
    values
        (?, ?)
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
